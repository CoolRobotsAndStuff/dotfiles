# This file has been auto-generated by i3-config-wizard(1).
# It will not be overwritten, so edit it as you like.
#
# Should you change your keyboard layout some time, delete
# this file and re-run i3-config-wizard(1).
#

# i3 config file (v4)
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!
exec i3lock --nofork --color 24283b && toggle_buckle
# ctl
set $mod Mod4 
#alt
#set $mod Mod1 

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
#font pango:monospace 8

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
#font pango:DenojaVu Sans Mono 8
font pango: FiraCode Nerd Font 10
# The combination of xss-lock, nm-applet and pactl is a popular choice, so
# they are included here as an example. Modify as you see fit.

# class                 border  backgr. text    indicator child_border
client.focused          #ffffff #24283b #ffffff #24283b   #00ccff
client.focused_inactive #ffffff #000000 #ffffff #484e50   #5f676a
client.unfocused        #000000 #000000 #ffffff #000000   #222222
client.urgent           #2f343a #900000 #ffffff #900000   #900000
client.placeholder      #000000 #0c0c0c #ffffff #000000   #0c0c0c

client.background       #ffffff

default_border pixel
 

# xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the
# screen before suspend. Use loginctl lock-session to lock your screen.
# exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork --color=000000
# NetworkManager is the most popular way to manage wireless networks on Linux,
# and nm-applet is a desktop environment-independent system tray GUI for it.
exec --no-startup-id nm-applet

exec xset -dpms
exec xset s off
exec xset s noblank

# Use pactl to adjust volume in PulseAudio.
set $refresh_i3status killall -SIGUSR1 i3status
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
# bindsym $mod+Return exec gnome-terminal -- bash -c "start_vim_term.sh"
bindsym $mod+Return exec /home/ale/.cargo/bin/alacritty
#nvim -c 'term'"

# kill focused window
bindsym $mod+q kill

# start dmenu (a program launcher)
bindsym $mod+d exec dmenu_run
# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
# bindsym $mod+d exec --no-startup-id i3-dmenu-desktop

# Move focus
bindsym $mod+h exec --no-startup-id ~/.cargo/bin/easy-i3-neovim-nav focus left
bindsym $mod+j exec --no-startup-id ~/.cargo/bin/easy-i3-neovim-nav focus down
bindsym $mod+k exec --no-startup-id ~/.cargo/bin/easy-i3-neovim-nav focus up
bindsym $mod+l exec --no-startup-id ~/.cargo/bin/easy-i3-neovim-nav focus right

# Resizing                                                               
bindsym $mod+Mod1+h  resize shrink width  10 px or 10 ppt
bindsym $mod+Mod1+j  resize shrink height 10 px or 10 ppt
bindsym $mod+Mod1+k  resize grow   height 10 px or 10 ppt
bindsym $mod+Mod1+l  resize grow   width  10 px or 10 ppt

# change focus
# bindsym $mod+h focus left
# bindsym $mod+j focus down
# bindsym $mod+k focus up
# bindsym $mod+l focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right


# split in horizontal orientation
bindsym $mod+bar split h

# split in vertical orientation
bindsym $mod+minus split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

bindsym $mod+c exec xdotool mousedown 1 && sleep 0.5 && xdotool mouseup 1
# focus the parent container
# bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"

# switch to workspace

bindsym $mod+u workspace number $ws1, exec focus_current_window
bindsym $mod+i workspace number $ws2, exec focus_current_window
bindsym $mod+o workspace number $ws3, exec focus_current_window
bindsym $mod+p workspace number $ws4, exec focus_current_window
bindsym $mod+5 workspace number $ws5, exec focus_current_window
bindsym $mod+6 workspace number $ws6, exec focus_current_window
bindsym $mod+7 workspace number $ws7, exec focus_current_window
bindsym $mod+8 workspace number $ws8, exec focus_current_window
bindsym $mod+9 workspace number $ws9, exec focus_current_window
bindsym $mod+0 workspace number $ws10, exec focus_current_window
workspace_auto_back_and_forth yes
focus_wrapping no

# move focused container to workspace
bindsym $mod+Shift+u move container to workspace number $ws1
bindsym $mod+Shift+i move container to workspace number $ws2
bindsym $mod+Shift+o move container to workspace number $ws3
bindsym $mod+Shift+p move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10


# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
#bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym h resize shrink width 10 px or 10 ppt, exec focus_current_window
        bindsym k resize grow height 10 px or 10 ppt, exec focus_current_window
        bindsym j resize shrink height 10 px or 10 ppt, exec focus_current_window
        bindsym l resize grow width 10 px or 10 ppt, exec focus_current_window

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt, exec focus_current_window
        bindsym Down resize grow height 10 px or 10 ppt, exec focus_current_window
        bindsym Up resize shrink height 10 px or 10 ppt, exec focus_current_window
        bindsym Right resize grow width 10 px or 10 ppt, exec focus_current_window

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
        bindsym ntilde mode "default"
}


bindsym $mod+r mode "resize"


# ---------------[ Global Vim Emulation ]---------------

# This is a file written purely in the i3 configuration language to mimic vim motions at a global level.
# It works by simulating inputs in your system with the program of your choice, using the available tools for text editing
# like the End, Home and arrow keys. This relies on the program that you might be running being able to interpret these 
# hotkeys. Luckily, most do! This way you are able to use vim motions in any program, whithout having to install any
# plugins.

# ----------------------[ CONFIG ]----------------------

# Mode names
set      $normal_mode "Vim Mode - Normal"
set      $visual_mode "Vim Mode - Visual"
set $visual_line_mode "Vim Mode - Visual Line"
set      $insert_mode "Vim Mode - Insert"

# Auxiliary modes to simulate basic motions
set      $delete_mode "Vim Mode - d"
set         $cut_mode "Vim Mode - x"
set        $yank_mode "Vim Mode - y"
set     $replace_mode "Vim Mode - c"
set      $escape_mode "Vim Mode - ."
set        $exit_mode "Vim Mode - about to exit"

# Command used to simulate input
set $pk xdotool key
set $pknomods xdotool key --clearmodifiers

# --( Keymaps )--

# $mod + this key will activate vim mode.
# To exit use the esc key while in normal mode
# Feel free to change how entering and exiting works in the config below.
set $activate_vim_mode n
set $esc ntilde

# Movement
set $h h
set $l l
set $j j
set $k k

set $e e
set $b b

set $dollar dollar
set $0 0


# Keys for the different modes (Learned the hard way that variables in i3 are case insensitive)
set $i i
set $v v
set $_upper_v Shift+v

# Paste
set $p p
set $upper_p Shift+p

# Copy / Yank
set $y y
set $upper_y Shift+y

# Delete and copy to clipboard (cut)
set $d x
set $upper_d Shift+x

# Delete without copying to clipboard
set $_d d 
set $_upper_d Shift+d

# Replace
set $c c
set $upper_c Shift+c

# New line
set $o o
set $upper_o Shift+o
 
set $undo u
set $redo Ctrl+r


# -------------------[ END OF CONFIG ]-------------------

mode $insert_mode {
    bindsym Return --release    exec --no-startup-id $pk Shift+Return
    bindsym $esc                mode $escape_mode
}

mode $escape_mode {
    bindsym $i                  mode $insert_mode  
    bindsym $v                  mode $visual_mode
    bindsym $esc                mode $normal_mode
}

mode $exit_mode {
    bindsym $esc                mode "default"
}

mode $visual_line_mode {
    bindsym $j --release        exec --no-startup-id $pk shift+Down && $pk shift+End
    bindsym $k --release        exec --no-startup-id $pk shift+Up   && $pk shift+Home

    bindsym $p --release        exec --no-startup-id $pk ctrl+v, mode $normal_mode
    bindsym $d --release        exec --no-startup-id $pk ctrl+x, mode $normal_mode
    bindsym $y --release        exec --no-startup-id $pk ctrl+c, mode $normal_mode
    bindsym $_d --release       exec --no-startup-id $pk BackSpace, mode $normal_mode
    bindsym $c --release        exec --no-startup-id $pk BackSpace, mode $insert_mode

    bindsym $undo --release     exec --no-startup-id $pk ctrl+z
    bindsym $redo --release     exec --no-startup-id $pk ctrl+y

    bindsym $esc --release      exec --no-startup-id $pk Left, mode $escape_mode
}

mode $visual_mode {
    bindsym $h --release        exec --no-startup-id $pk shift+Left
    bindsym $l --release        exec --no-startup-id $pk shift+Right
    bindsym $j --release        exec --no-startup-id $pk shift+Down
    bindsym $k --release        exec --no-startup-id $pk shift+Up
    bindsym $e --release        exec --no-startup-id $pk shift+ctrl+Right
    bindsym $b --release        exec --no-startup-id $pk shift+ctrl+Left
    bindsym $dollar --release   exec --no-startup-id $pk shift+End
    bindsym $0 --release        exec --no-startup-id $pk shift+Home
    
    bindsym $p --release        exec --no-startup-id $pk ctrl+v, mode $normal_mode
    bindsym $d --release        exec --no-startup-id $pk ctrl+x, mode $normal_mode
    bindsym $y --release        exec --no-startup-id $pk ctrl+c, mode $normal_mode
    bindsym $_d --release       exec --no-startup-id $pk BackSpace, mode $normal_mode
    bindsym $c --release        exec --no-startup-id $pk BackSpace, mode $insert_mode

    bindsym $undo --release     exec --no-startup-id $pk ctrl+z
    bindsym $redo --release     exec --no-startup-id $pk ctrl+y
    
    bindsym $esc  --release     exec --no-startup-id $pk Left, mode $escape_mode
}

mode $delete_mode {
    bindsym $h --release        exec --no-startup-id $pk BackSpace, mode $normal_mode
    bindsym $l --release        exec --no-startup-id $pk Delete,    mode $normal_mode
    bindsym $e --release        exec --no-startup-id $pk shift+ctrl+Right && $pk BackSpace, mode $normal_mode
    bindsym $b --release        exec --no-startup-id $pk shift+ctrl+Left  && $pk BackSpace, mode $normal_mode
    bindsym $dollar --release   exec --no-startup-id $pk shift+End        && $pk BackSpace, mode $normal_mode
    bindsym $0 --release        exec --no-startup-id $pk shift+Home       && $pk BackSpace, mode $normal_mode

    bindsym $_d --release       exec --no-startup-id $pk Home      \
                                                  && $pk shift+End \
                                                  && $pk BackSpace, mode $normal_mode
    bindsym $esc                mode $normal_mode
}

mode $yank_mode {
    bindsym $h --release        exec --no-startup-id $pk shift+Left       && $pk ctrl+c && $pk Left, mode $normal_mode
    bindsym $l --release        exec --no-startup-id $pk shift+Right      && $pk ctrl+c && $pk Left, mode $normal_mode
    bindsym $e --release        exec --no-startup-id $pk shift+ctrl+Right && $pk ctrl+c && $pk Left, mode $normal_mode
    bindsym $b --release        exec --no-startup-id $pk shift+ctrl+Left  && $pk ctrl+c && $pk Left, mode $normal_mode
    bindsym $dollar --release   exec --no-startup-id $pk shift+End        && $pk ctrl+c && $pk Left, mode $normal_mode
    bindsym $0 --release        exec --no-startup-id $pk shift+Home       && $pk ctrl+c && $pk Left, mode $normal_mode

    bindsym $y --release        exec --no-startup-id $pk Home      \
                                                  && $pk shift+End \
                                                  && $pk ctrl+c, mode $normal_mode
    bindsym $esc                mode $normal_mode
}

mode $cut_mode {
    bindsym $h --release        exec --no-startup-id $pk shift+Left       && $pk ctrl+x, mode $normal_mode
    bindsym $l --release        exec --no-startup-id $pk shift+Right      && $pk ctrl+x, mode $normal_mode
    bindsym $e --release        exec --no-startup-id $pk shift+ctrl+Right && $pk ctrl+x, mode $normal_mode
    bindsym $b --release        exec --no-startup-id $pk shift+ctrl+Left  && $pk ctrl+x, mode $normal_mode
    bindsym $dollar --release   exec --no-startup-id $pk shift+End        && $pk ctrl+x, mode $normal_mode
    bindsym $0 --release        exec --no-startup-id $pk shift+Home       && $pk ctrl+x, mode $normal_mode

    bindsym $d --release        exec --no-startup-id $pk Home      \
                                                  && $pk shift+End \
                                                  && $pk ctrl+x, mode $normal_mode
    bindsym $esc                mode $normal_mode
}

mode $replace_mode {
    bindsym $h --release        exec --no-startup-id $pk BackSpace, mode $insert_mode
    bindsym $l --release        exec --no-startup-id $pk Delete,    mode $insert_mode
    bindsym $e --release        exec --no-startup-id $pk shift+ctrl+Right && $pk BackSpace, mode $insert_mode
    bindsym $b --release        exec --no-startup-id $pk shift+ctrl+Left  && $pk BackSpace, mode $insert_mode
    bindsym $dollar --release   exec --no-startup-id $pk shift+End        && $pk BackSpace, mode $insert_mode
    bindsym $0 --release        exec --no-startup-id $pk shift+Home       && $pk BackSpace, mode $insert_mode

    bindsym $c --release        exec --no-startup-id $pk Home      \
                                                  && $pk shift+End \
                                                  && $pk BackSpace, mode $insert_mode
    bindsym $esc                mode $normal_mode
}

mode $normal_mode {
    # Vim like movement
    bindsym $h --release        exec --no-startup-id $pk Left
    bindsym $l --release        exec --no-startup-id $pk Right
    bindsym $j --release        exec --no-startup-id $pk Down
    bindsym $k --release        exec --no-startup-id $pk Up
    bindsym $e --release        exec --no-startup-id $pk ctrl+Right
    bindsym $b --release        exec --no-startup-id $pk ctrl+Left
    bindsym $dollar --release   exec --no-startup-id $pk End
    bindsym $0 --release        exec --no-startup-id $pk Home
   
    bindsym $upper_p --release  exec --no-startup-id $pk Left && $pk ctrl+v
    bindsym $p --release        exec --no-startup-id $pk ctrl+v

    bindsym $upper_d --release  exec --no-startup-id $pk shift+End && $pk ctrl+x
    bindsym $d --release        mode $cut_mode

    bindsym $upper_y --release  exec --no-startup-id $pk shift+End && $pk ctrl+c && $pk Left
    bindsym $y --release        mode $yank_mode

    bindsym $_upper_d --release exec --no-startup-id $pk shift+End && $pk BackSpace
    bindsym $_d --release       mode $delete_mode

    bindsym $upper_c --release  exec --no-startup-id $pk shift+End && $pk BackSpace, mode $insert_mode
    bindsym $c --release        mode $replace_mode

    bindsym $o --release        exec --no-startup-id $pk End && $pk shift+Return, mode $insert_mode
    bindsym $upper_o --release  exec --no-startup-id $pk Home && $pk shift+Return && $pk Up, mode $insert_mode

    bindsym $undo --release     exec --no-startup-id $pk ctrl+z
    bindsym $redo --release     exec --no-startup-id $pk ctrl+y

    bindsym $esc                mode $exit_mode
    bindsym $i                  mode $insert_mode
    bindsym $a --release        exec --no-startup-id $pk Right, mode $insert_mode
    bindsym $_upper_v --release exec --no-startup-id $pknomods End && $pk shift+Home, mode $visual_line_mode
    bindsym $v --release        mode $visual_mode
}

bindsym $mod+$activate_vim_mode mode $normal_mode

# ------------------  _____________________________ -------------------
# -------------------[ End of Global Vim Emulation ]-------------------
# ------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -------------------


# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
        status_command i3status
}

exec xinput set-prop "SYNA7DB5:00 06CB:7DAB Touchpad" "libinput Tapping Enabled" 1
exec xinput set-prop "SYNA7DB5:00 06CB:7DAB Touchpad" "libinput Natural Scrolling Enabled" 1


set $Locker i3lock --color=24283b 

set $mode_system System (l) lock, (e) logout, (s) suspend, (h) hibernate, (r) reboot, (Pause again) shutdown
mode "$mode_system" {
    bindsym l exec --no-startup-id $Locker, mode "default"
    bindsym e exec --no-startup-id i3-msg exit, mode "default"
    bindsym s exec --no-startup-id $Locker && systemctl suspend, mode "default"
    bindsym h exec --no-startup-id $Locker && systemctl hibernate, mode "default"
    bindsym r exec --no-startup-id systemctl reboot, mode "default"
    bindsym Pause exec --no-startup-id systemctl poweroff -i, mode "default"  

    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"

    bindsym ntilde mode "default"
}

bindsym Pause mode "$mode_system"

set $menu Quick menu: (b) connect to earphones, (d) disconnect from earphones, (k) buckle, (l) laptop display 
mode "$menu" {
    bindsym b exec --no-startup-id bluetoothctl connect 74:2A:8A:B8:11:0F, mode "default"
    bindsym d exec --no-startup-id bluetoothctl disconnect 74:2A:8A:B8:11:0F, mode "default" 
    bindsym k exec --no-startup-id toggle_buckle, mode "default"
    bindsym l exec --no-startup-id toggle_laptop_display, mode "default"
    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym ntilde mode "default"
}

bindsym $mod+m mode "$menu"

bindsym XF86MonBrightnessUp exec --no-startup-id brightnessctl set +5%
bindsym XF86MonBrightnessDown exec --no-startup-id brightnessctl set 5%-

## Screenshots
bindsym Print exec --no-startup-id maim "/home/$USER/Pictures/Screenshots/$(date).png"
bindsym $mod+Print exec --no-startup-id maim --window $(xdotool getactivewindow) "/home/$USER/Pictures/Screenshots/$(date).png"
bindsym Shift+Print exec --no-startup-id maim --select "/home/$USER/Pictures/Screenshots/$(date).png"

## Clipboard Screenshots
bindsym Ctrl+Print exec --no-startup-id maim | xclip -selection clipboard -t image/png
bindsym Ctrl+$mod+Print exec --no-startup-id maim --window $(xdotool getactivewindow) | xclip -selection clipboard -t image/png
bindsym Ctrl+Shift+Print exec --no-startup-id maim --select | xclip -selection clipboard -t image/png

bindsym $mod+b exec librewolf

exec_always setxkbmap -layout latam
exec --no-startup-id picom --daemon --backend glx --vsync --xrender-sync-fence
exec_always --no-startup-id hsetroot -solid '#000000'
exec_always --no-startup-id kdeconnect-cli --refresh

exec --no-startup-id sleep 0.2 && nohup bucklespring.buckle -v & 
exec --no-startup-id /bin/bash -c "sleep 0.1 && configure_monitors"
workspace 1 output primary

focus_follows_mouse yes
